/**
 * ICMPv4 Protocol
 * All types have been defined on the basis of RFC 792
 * 
 */
module Icmpv4Protocol {
    import from BasicTypeAndValues {
        type UInt4, UInt16, UInt1, UInt13, UInt8, UInt24, UInt32,
            Bit8, 
            Oct2, Oct3, Oct4, Oct8, Oct12,
            Ipv4Address
    }
    /** icmpv4 type field values **/
    const UInt8     c_icmpType_ipv4ERep :=  0; // ICMPv4 Echo Reply message
    const UInt8     c_icmpType_ipv4DUnr :=  3; // ICMPv4 Destination Unreachable message
    const UInt8     c_icmpType_ipv4SQue :=  4; // ICMPv4 Source Quench message
    const UInt8     c_icmpType_ipv4Redi :=  5; // ICMPv4 Redirect message
    const UInt8     c_icmpType_ipv4EReq :=  8; // ICMPv4 Echo message
    const UInt8     c_icmpType_ipv4RAdv :=  9; // ICMPv4 Router Advertisement message
    const UInt8     c_icmpType_ipv4RSol := 10; // ICMPv4 Router Solicitation message
    const UInt8     c_icmpType_ipv4TiEx := 11; // ICMPv4 Time Exceeded message
    const UInt8     c_icmpType_ipv4PPro := 12; // ICMPv4 Parameter Problem message
    const UInt8     c_icmpType_ipv4TReq := 13; // ICMPv4 Timestamp message
    const UInt8     c_icmpType_ipv4TRep := 14; // ICMPv4 Timestamp Reply message
    const UInt8     c_icmpType_ipv4IReq := 15; // ICMPv4 Information Request message
    const UInt8     c_icmpType_ipv4IRep := 16; // ICMPv4 Information Reply message
    const UInt8     c_icmpType_ipv4MReq := 17; // ICMPv4 Mask Request message
    const UInt8     c_icmpType_ipv4MRep := 18; // ICMPv4 Mask Reply message
    const UInt8     c_icmpType_ipv4Unkn := 99; // ICMPv4 unknown message
    
    type union Icmpv4Protocol {
        EchoRequest echoRequest,
        EchoReply echoReply,
        InformationRequest infoRequest,
        InformationReply infoReply,
        TimestampRequest tsRequest,
        TimestampReply tsReply,
        MaskRequest maskRequest,
        MaskReply maskReply,
        RouterAdvertisement routerAdv,
        RouterSolicitation routerSol,
        Unknown unknown,
        DestinationUnreachable dstUnreachable,
        Redirect redirect,
        SourceQuench srcQuench,
        TimeExceeded timeExceeded,
        ParameterProblem paraProblem
    } with {
        variant Protocol(true); CaseRefRegion(0, 8)
        variant(echoRequest) CaseCond(integer (c_icmpType_ipv4EReq))
        variant(echoReply) CaseCond(integer (c_icmpType_ipv4ERep))
        variant(infoRequest) CaseCond(integer (c_icmpType_ipv4IReq))
        variant(infoReply) CaseCond(integer (c_icmpType_ipv4IRep))
        variant(tsRequest) CaseCond(integer (c_icmpType_ipv4TReq))
        variant(tsReply) CaseCond(integer (c_icmpType_ipv4TRep))
        variant(maskRequest) CaseCond(integer (c_icmpType_ipv4MReq))
        variant(maskReply) CaseCond(integer (c_icmpType_ipv4MRep))
        variant(routerAdv) CaseCond(integer (c_icmpType_ipv4RAdv))
        variant(routerSol) CaseCond(integer (c_icmpType_ipv4RSol))
        variant(unknown) CaseCond(integer (c_icmpType_ipv4Unkn))
        variant(dstUnreachable) CaseCond(integer (c_icmpType_ipv4DUnr))
        variant(redirect) CaseCond(integer (c_icmpType_ipv4Redi))
        variant(srcQuench) CaseCond(integer (c_icmpType_ipv4SQue))
        variant(timeExceeded) CaseCond(integer (c_icmpType_ipv4TiEx))
        variant(paraProblem) CaseCond(integer (c_icmpType_ipv4PPro))
    }
    
    type record EchoRequest {
        UInt8       icmpType(c_icmpType_ipv4EReq),
        UInt8       icmpCode(0),
        Oct2        checksum,
        UInt16      identifier,
        UInt16      sequenceNumber,
        octetstring data optional
    }
    
    type record EchoReply {   
        UInt8       icmpType(c_icmpType_ipv4ERep),
        UInt8       icmpCode(0),
        Oct2        checksum,
        UInt16      identifier,
        UInt16      sequenceNumber,
        octetstring data optional
    }
    
    type record InformationRequest {
        UInt8       icmpType(c_icmpType_ipv4IReq),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt16      identifier,
        UInt16      sequenceNumber
    }
    
    type record InformationReply {
        UInt8       icmpType(c_icmpType_ipv4IRep),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt16      identifier,
        UInt16      sequenceNumber
    }
    
    type record TimestampRequest {
        UInt8       icmpType(c_icmpType_ipv4TReq),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt16      identifier,
        UInt16      sequenceNumber,
        Oct12       timestamps
    }
    
    type record TimestampReply {
        UInt8       icmpType(c_icmpType_ipv4TRep),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt16      identifier,
        UInt16      sequenceNumber,
        Oct12       timestamps
    }
    
    type record MaskRequest {
        UInt8       icmpType(c_icmpType_ipv4MReq),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt16      identifier,
        UInt16      sequenceNumber,
        Oct4        mask
    }
    
    type record MaskReply {
        UInt8       icmpType(c_icmpType_ipv4MRep),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt16      identifier,
        UInt16      sequenceNumber,
        Oct4        mask
    }
    
    type record RouterAdvertisement {
        UInt8       icmpType(c_icmpType_ipv4RAdv),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt8       advertisementCount,
        UInt8       addressEntrySize,
        UInt16      lifetime,
        octetstring addresses
    }
    
    type record RouterSolicitation {
        UInt8       icmpType(c_icmpType_ipv4RSol),
        UInt8       icmpCode,
        Oct2        checksum,
        Oct4        reserved // set to all zeros
    }
    
    type record Unknown {
        UInt8       icmpType(c_icmpType_ipv4Unkn),
        UInt8       icmpCode,
        Oct2        checksum,
        Oct4        anyvalue
    }
    
    type record DestinationUnreachable {
        UInt8       icmpType(c_icmpType_ipv4DUnr),
        UInt8       icmpCode,
        Oct2        checksum,
        Oct2        unused, // set to all zeros
        UInt16      nextHopMTU,
        octetstring data
    } with {
        enum(icmpCode) {
            (0)     "Net unreachable",
            (1)     "Host unreachable",
            (2)     "Protocol unreachable",
            (3)     "Port unreachable",
            (4)     "Fragmentation needed and DF set",
            (5)     "Source route failed"
        }
    }
    
    type record Redirect {
        UInt8       icmpType(c_icmpType_ipv4Redi),
        UInt8       icmpCode,
        Oct2        checksum,
        Ipv4Address gatewayAddress,
        octetstring data
    } with {
        enum(icmpCode) {
            (0)     "Redirect datagrams for the network",
            (1)     "Redirect datagrams for the host",
            (2)     "Redirect datagrams for the type of service and network",
            (3)     "Redirect datagrams for the type of service and host"
        }
    }

    type record SourceQuench {
        UInt8       icmpType(c_icmpType_ipv4SQue),
        UInt8       icmpCode,
        Oct2        checksum,
        Oct4        unused, // set to all zeros
        octetstring data
    }

    type record TimeExceeded {
        UInt8       icmpType(c_icmpType_ipv4TiEx),
        UInt8       icmpCode,
        Oct2        checksum,
        Oct4        unused, // set to all zeros
        octetstring data
    } with {
        enum(icmpCode) {
            (0)      "Time to live exceeded in transit",
            (1)      "Fragment reassembly time exceeded"
        }
    }

    type record ParameterProblem {
        UInt8       icmpType(c_icmpType_ipv4PPro),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt8       pointer,
        Oct3        unused, // set to all zeros
        octetstring data
    }

} with {
    encode "FPB"
    variant ByteOrder(BIG_ENDIAN)
    runtime TypeEvFactoryJavaClass="com.fineqt.fpb.protocol.Icmpv4TypeEVExtFactory"
}
/**
 * TCP protocol description. 
 * All types have been defined on the basis of RFC 793
 */
module TcpProtocol {
    import from BasicTypeAndValues {
        type UInt16, UInt32, UInt1, UInt4, UInt6, UInt8, 
            Oct2, Oct4
    }

    import from GlobalEnumSets {
        enumset PortNumbers
    }

    type record TcpProtocol {
        TcpHeader header,
        TcpPayload payload optional
    } with {
        variant Protocol(true);
    }
    
    type record TcpHeader {
        UInt16      sourcePort,
        UInt16      destinationPort,
        UInt32      sequenceNumber,
        UInt32      ackNumber,
        UInt4       dataOffset,
        UInt6       reserved,
        boolean     urgent,
        boolean     ack,
        boolean     push,
        boolean     reset,
        boolean     syn,
        boolean     fin,
        UInt16      windowSize,
        Oct2        checksum,
        UInt16      urgentPointer,
        TcpOptionList options optional,
        octetstring padding
    } with {
        variant LengthRef("+dataOffset"); LengthMultiplier(32);
        variant(dataOffset) FlagType(OCTET2)
        variant(reserved) FlagType(OCTET2)
        variant(urgent) FlagType(OCTET2)
        variant(ack) FlagType(OCTET2)
        variant(push) FlagType(OCTET2)
        variant(reset) FlagType(OCTET2)
        variant(syn) FlagType(OCTET2)
        variant(fin) FlagType(OCTET2)
        variant(padding) PadType(OCTET4)
        enumref(sourcePort) PortNumbers
        enumref(destinationPort) PortNumbers
    }
    
    type UInt8 LastOption(0);
    
    type UInt8 NopOption(1);
    
    type record MaxSsOption {
        UInt8   optionCode(2),
        UInt8   optionLength(4),
        UInt16  value
    } with {
        enumref(optionCode) TcpOptionCodes
    }
    
    type record WindowScaleOption {
        UInt8   optionCode(3),
        UInt8   optionLength(3),
        UInt8   shift
    } with {
        enumref(optionCode) TcpOptionCodes
    }
    
    type record SackPermittedOption {
        UInt8   optionCode(4),
        UInt8   optionLength(2)
    } with {
        enumref(optionCode) TcpOptionCodes
    }
    
    type record SackOption {
        UInt8   optionCode(5),
        UInt8   optionLength,
        SackOptionBlockList blocks
    } with {
        variant LengthRef("+optionLength"); LengthMultiplier(8);
        enumref(optionCode) TcpOptionCodes
    }
    
    type record SackOptionBlock {
        UInt32  leftEdge,
        UInt32  rightEdge
    }
    
    type set of SackOptionBlock SackOptionBlockList;
    
    type record EchoOption {
        UInt8   optionCode(6),
        UInt8   optionLength(6),
        Oct4    data  
    } with {
        enumref(optionCode) TcpOptionCodes
    }
    
    type record EchoReplyOption {
        UInt8   optionCode(7),
        UInt8   optionLength(6),
        Oct4    data  
    } with {
        enumref(optionCode) TcpOptionCodes
    }

    type record TimestampOption {
        UInt8   optionCode(8),
        UInt8   optionLength(10),
        UInt32  value,
        UInt32  echoReply
    } with {
        enumref(optionCode) TcpOptionCodes
    }

    type record OtherTcpOption {
        UInt8   optionCode,
        UInt8   optionLength,
        octetstring data
    } with {
        variant LengthRef("+optionLength"); LengthMultiplier(8);
        enumref(optionCode) TcpOptionCodes
    }
        
    type union TcpOption {
        LastOption          last,
        NopOption           nop,
        MaxSsOption         maxSs,
        WindowScaleOption   windowScale,
        SackPermittedOption sackPermitted,
        SackOption          sack,
        EchoOption          echo,
        EchoReplyOption     echoReply,
        TimestampOption     timestamp,
        OtherTcpOption      other
    } with {
        variant CaseRefRegion(0, 8); CaseDefault(other);
        variant(last) CaseCond(integer (0))
        variant(nop) CaseCond(integer (1))
        variant(maxSs) CaseCond(integer (2))
        variant(windowScale) CaseCond(integer (3))
        variant(sackPermitted) CaseCond(integer (4))
        variant(sack) CaseCond(integer (5))
        variant(echo) CaseCond(integer (6))
        variant(echoReply) CaseCond(integer (7))
        variant(timestamp) CaseCond(integer (8))
    }
    
    type record of TcpOption TcpOptionList;
    
     //TODO use DecodeResult Field to distinguish the upper protocol
    type union TcpPayload {
         octetstring         data
    }

    enumset integer TcpOptionCodes {
        (0)      "End of Option List",
        (1)      "No-Operation",
        (2)      "Maximum Segment Lifetime",
        (3)      "Window Scale",
        (4)      "SACK Permitted",
        (5)      "SACK",
        (6)      "Echo - obsoleted by option 8",
        (7)      "Echo Reply - obsoleted by option 8",
        (8)      "Time Stamp Option",
        (9)      "Partial Order Connection Permitted",
        (10)      "Partial Order Service Profile",
        (11)      "CC",
        (12)      "CC.NEW",
        (13)      "CC.ECHO",
        (14)      "TCP Alternate Checksum Request",
        (15)      "TCP Alternate Checksum Data",
        (16)      "Skeeter",
        (17)      "Bubba",
        (18)      "Trailer Checksum Option"
    }
    
} with {
    encode "FPB"
    variant ByteOrder(BIG_ENDIAN)
    runtime TypeEvFactoryJavaClass="com.fineqt.fpb.protocol.TcpTypeEVExtFactory"
}
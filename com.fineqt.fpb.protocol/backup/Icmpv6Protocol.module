/*
 * Icmpv6 protocol description. 
 * Some source is copied from LibIpv6_CommonRfcs_TypesAndValues.ttcn
 * and LibIpv6_Rfc2463Icmpv6_TypesAndValues.ttcn and 
 * LibIpv6_Interface_TypesAndValues.ttcn and LibIpv6_Rfc2461NeighborDiscovery_TypesAndValues.ttcn
 * of ETSI
 */
module Icmpv6Protocol {
    import from BasicTypeAndValues {
        type UInt1, UInt3, UInt4, UInt5, UInt8, UInt16, UInt29, UInt32, UInt48, 
            Oct2, Oct4, Oct6to15, Oct16, 
            Ipv6Address
    }

    //RFC2463 Message ID    
    const UInt8 c_destinationUnreachableMsg := 1;
    const UInt8 c_packetTooBigMsg := 2;
    const UInt8 c_timeExceededMsg := 3;
    const UInt8 c_parameterProblemMsg := 4;
    const UInt8 c_unknownInformational := 127;
    const UInt8 c_echoRequestMsg := 128;
    const UInt8 c_echoReplyMsg := 129;
    const UInt8 c_unknownError := 255;

    //RFC2461 Message ID    
    const UInt8   c_prefixInfo := 3 ;
    const UInt8   c_redirectOption := 4 ;
    const UInt8   c_rtSolMsg := 133;
    const UInt8   c_rtAdvMsg := 134;
    const UInt8   c_nbrSolMsg := 135;
    const UInt8   c_nbrAdvMsg := 136;
    const UInt8   c_redirectMsg := 137;

    //RFC3810 Message ID
    const UInt8   c_mldQueryV2 := 130;
    const UInt8   c_mldReportV2 := 143;
    const UInt8   c_mldDone := 132;
    
    const UInt8 c_srcLinkLayerAddress := 1;
    const UInt8 c_tgtLinkLayerAddress := 2;
    const UInt8 c_mtuOption := 5;
    
    //RFC3775 Options
    const UInt8 c_bindingRefreshAdvice := 2;
    const UInt8 c_alternateCareofAddress := 3;
    const UInt8 c_nonceIndices := 4;
    const UInt8 c_authorizationData := 5;
    const UInt8 c_advertisementInterval := 7;
    const UInt8 c_homeAgentInfo := 8;

    const UInt8 c_maxNrSourceAddress := 89;
    
    type union Icmpv6Protocol {
        //Imported from Rfc 2463
        DestinationUnreachable      dstUnreachable,
        PacketTooBig                packetTooBig,
        TimeExceeded                timeExceeded,
        ParameterProblem            paraProblem,
        EchoRequest                 echoRequest,
        EchoReply                   echoReply,
        //Imported from Rfc 2461
        RouterSolicitation          routerSol,
        RouterAdvertisement         routerAdv,
        NeighborSolicitation        nbrSol,
        NeighborAdvertisement       nbrAdv,
        Redirect                    redirect,
        //Imported from Rfc 3810
        MldQueryV2                  mldQueryV2,
        MldReportV2                 mldReportV2,
        MldDone                     mldDone,
        //Default value
        OtherIcmpv6Msg              other
    } with {
        variant Protocol(true); CaseRefRegion(0, 8); CaseDefault(other)
        variant(echoRequest) CaseCond(integer (c_echoRequestMsg))
        variant(echoReply) CaseCond(integer (c_echoReplyMsg))
        variant(dstUnreachable) CaseCond(integer (c_destinationUnreachableMsg))
        variant(packetTooBig) CaseCond(integer (c_packetTooBigMsg))
        variant(timeExceeded) CaseCond(integer (c_timeExceededMsg))
        variant(paraProblem) CaseCond(integer (c_parameterProblemMsg))
        variant(routerSol) CaseCond(integer (c_rtSolMsg))
        variant(routerAdv) CaseCond(integer (c_rtAdvMsg))
        variant(nbrSol) CaseCond(integer (c_nbrSolMsg))
        variant(nbrAdv) CaseCond(integer (c_nbrAdvMsg))
        variant(redirect) CaseCond(integer (c_redirectOption))
        variant(mldQueryV2) CaseCond(integer (c_mldQueryV2))
        variant(mldReportV2) CaseCond(integer (c_mldReportV2))
        variant(mldDone) CaseCond(integer (c_mldDone))
    }    

    /*******************************************************
     * RFC2463 Message
     *******************************************************/

    /*
     * @desc PDU type derived from RFC2463 clause 3.1
    */
    type record DestinationUnreachable {
        UInt8       icmpType(c_destinationUnreachableMsg),
        UInt8       icmpCode,
        Oct2        checksum,
        Oct4        unused,
        octetstring data optional
    } with {
        enumref(icmpType) Icmpv6MessageTypes
        enum(icmpCode)  {
            (0)     "No route to destination",
            (1)     "Communication with destination administratively prohibited",
            (2)     "Not assigned",
            (3)     "Address unreachable",
            (4)     "Port unreachable"
        }
    }
    
    /*
     * @desc PDU type derived from RFC2463 clause 3.2
    */
    type record PacketTooBig {
        UInt8       icmpType(c_packetTooBigMsg),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt32      mtu,
        octetstring data optional
    } with {
        enumref(icmpType) Icmpv6MessageTypes
    }
    
    /*
     * @desc PDU type derived from RFC2463 clause 3.3
    */
    type record TimeExceeded {
        UInt8   icmpType(c_timeExceededMsg),
        UInt8   icmpCode,
        Oct2    checksum,
        UInt32  unused(0), //always zero
        octetstring data optional
    } with {
        enumref(icmpType) Icmpv6MessageTypes
        enum(icmpCode) {
            (0)     "Hop limit exceeded in transit",
            (1)     "Fragment reassembly time exceeded"
        }
    }
    
    /*
     * @desc PDU type derived from RFC2463 clause 3.4
    */
    type record ParameterProblem {
        UInt8       icmpType(c_parameterProblemMsg),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt32      pointer,
        octetstring data optional
    } with {
        enumref(icmpType) Icmpv6MessageTypes
        enum(icmpCode) {
            (0)     "Erroneous header field encountered",
            (1)     "Unrecognized Next Header type encountered",            
            (2)     "Unrecognized IPv6 option encountered"
        }
    }
    
    /*
     * @desc PDU type derived from RFC2463 clause 4.1
    */
    type record EchoRequest {
        UInt8       icmpType(c_echoRequestMsg),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt16      identifier,
        UInt16      sequenceNumber,
        octetstring data optional
    } with {
        enumref(icmpType) Icmpv6MessageTypes
    }
    
    /*
     * @desc PDU type derived from RFC2463 clause 4.2
    */
    type record EchoReply {
        UInt8       icmpType(c_echoReplyMsg),
        UInt8       icmpCode,
        Oct2        checksum,
        UInt16      identifier,
        UInt16      sequenceNumber,
        octetstring data optional
    } with {
        enumref(icmpType) Icmpv6MessageTypes
    }

    /*
     * @desc Generic Icmpv6 header
    */
    type record OtherIcmpv6Msg {
        UInt8       icmpType,
        UInt8       icmpCode,
        Oct2        checksum,
        octetstring data optional
    } with {
        enumref(icmpType) Icmpv6MessageTypes
    }
    
    /*******************************************************
     * RFC2461 Message
     *******************************************************/
     
    /*
     * @desc PDU type derived from RFC2461 clause 4.1
    */
    type record RouterSolicitation {
        UInt8               icmpType(c_rtSolMsg),
        UInt8               icmpCode,
        Oct2                checksum,
        UInt32              reserved,
        NdpOptions          options optional
    } with {
        enumref(icmpType) Icmpv6MessageTypes
    }

    /*
     * @desc PDU type derived from RFC2461 clause 4.2
    */
    type record RouterAdvertisement {
        UInt8               icmpType(c_rtAdvMsg),
        UInt8               icmpCode,
        Oct2                checksum,
        UInt8               curHopLimit,
        UInt1               managedConfigFlag,
        UInt1               otherConfigFlag,
        UInt1               homeAgentFlag,
        UInt5               reserved,
        UInt16              routerLifetime,
        UInt32              reachableTime,
        UInt32              retransTimer,
        NdpOptions          options optional
    } with {
        variant(managedConfigFlag) FlagType(OCTET)
        variant(otherConfigFlag) FlagType(OCTET)
        variant(homeAgentFlag) FlagType(OCTET)
        variant(reserved) FlagType(OCTET)
        enumref(icmpType) Icmpv6MessageTypes
    }

    /*
     * @desc PDU type derived from Rfc 2461 clause 4.3  
    */
    type record NeighborSolicitation {
        UInt8               icmpType(c_nbrSolMsg),
        UInt8               icmpCode,
        Oct2                checksum,
        UInt32              reserved,
        Ipv6Address         targetAddr,
        NdpOptions          options optional
    } with {
        enumref(icmpType) Icmpv6MessageTypes
    }

    /*
     * @desc PDU type derived from Rfc 2461 clause 4.4
    */
    type record NeighborAdvertisement {
        UInt8               icmpType(c_nbrAdvMsg),
        UInt8               icmpCode,
        Oct2                checksum,
        UInt1               routerFlag,
        UInt1               solicitedFlag,
        UInt1               overrideFlag,
        UInt29              reserved,
        Ipv6Address         targetAddr,
        NdpOptions          options optional
    } with {
        variant(routerFlag) FlagType(OCTET4)
        variant(solicitedFlag) FlagType(OCTET4)
        variant(overrideFlag) FlagType(OCTET4)
        variant(reserved) FlagType(OCTET4)
        enumref(icmpType) Icmpv6MessageTypes
    }

    /*
     * @desc PDU type derived from Rfc 2461 clause 4.5
    */
    type record Redirect {
        UInt8               icmpType(c_redirectMsg),
        UInt8               icmpCode,
        Oct2                checksum,
        UInt32              reserved,
        Ipv6Address         targetAddr,
        Ipv6Address         destinationAddr,
        NdpOptions          options optional
    } with {
        enumref(icmpType) Icmpv6MessageTypes
    } 

    /*******************************************************
     * RFC3810 Message
     *******************************************************/
    type record MldQueryV2 {
        UInt8               icmpType(c_mldQueryV2),
        UInt8               icmpCode,
        Oct2                checksum,
        UInt16              maxResponseDelay,
        UInt16              reserved1,
        Ipv6Address         multicastAddress,
        UInt4               reserved2,
        UInt1               s,
        UInt3               qrv,
        UInt8               qqic,
        UInt16              numSources,
        Ipv6AddressList     sources length(1 .. c_maxNrSourceAddress)
    } with {
        variant(sources) RepeatRef("^numSources")
        variant(reserved2) FlagType(OCTET)
        variant(s) FlagType(OCTET)
        variant(qrv) FlagType(OCTET)
        enumref(icmpType) Icmpv6MessageTypes
    }

    type set of Ipv6Address Ipv6AddressList;
    
    type record MldReportV2 {
        UInt8               icmpType(c_mldReportV2),
        UInt8               icmpCode,
        Oct2                checksum,
        UInt16              reserved1,
        UInt16              numAddrRecords,
        MulticastAddressRecordList multicastAddrRecords
    } with {
        variant(multicastAddrRecords) RepeatRef("^numAddrRecords")
        enumref(icmpType) Icmpv6MessageTypes
    }
    
    type set of MulticastAddressRecord MulticastAddressRecordList;
    
    type record MulticastAddressRecord {
        UInt8   recordType,
        UInt8   auxDataLen,
        UInt16  numSources,
        Ipv6Address     multicastAddress,
        Ipv6AddressList sources,
        octetstring     auxData
    } with {
        variant(auxData) LengthRef("^auxDataLen"); LengthMultiplier(32)
        variant(sources) RepeatRef("^numSources");
        enum(recordType) {
            (1)     "MODE_IS_INCLUDE",
            (2)     "MODE_IS_EXCLUDE",
            (3)     "CHANGE_TO_INCLUDE_MODE",
            (4)     "CHANGE_TO_EXCLUDE_MODE",
            (5)     "ALLOW_NEW_SOURCES",
            (6)     "BLOCK_OLD_SOURCES"
        }
    }
    
    type record MldDone {
        UInt8               icmpType(c_mldDone),
        UInt8               icmpCode,
        Oct2                checksum,
        UInt16              maxResponseDelay,
        UInt16              reserved1,
        Ipv6Address         multicastAddress
    } with {
        enumref(icmpType) Icmpv6MessageTypes
    }
    
    /*******************************************************
     * RFC2461 Options
     *******************************************************/
    type union NdpOption {
        SrcLinkLayerAddress     srcLinkLayerAddr,
        TgtLinkLayerAddress     tgtLinkLayerAddr,
        RedirectedHeader        redirectHeader,
        MtuOption               mtuOption,
        PrefixInfo              prefixInfo,
        AdvertisementInterval   advInterval,
        HomeAgentInfo           homeAgentInfo,
        octetstring             otherOption
    } with {
        variant CaseRefRegion(0, 8); CaseDefault(otherOption)
        variant(srcLinkLayerAddr) CaseCond(integer (c_srcLinkLayerAddress))
        variant(tgtLinkLayerAddr) CaseCond(integer (c_tgtLinkLayerAddress))
        variant(redirectHeader) CaseCond(integer (c_redirectOption))
        variant(mtuOption) CaseCond(integer (c_mtuOption))
        variant(prefixInfo) CaseCond(integer (c_prefixInfo))
        variant(advInterval) CaseCond(integer (c_advertisementInterval))
        variant(homeAgentInfo) CaseCond(integer (c_homeAgentInfo))
    }
    
    type set of NdpOption NdpOptions;
    
    /*
     * @desc Derived from RFC 2461 clause 4.6.2
    */
    type record PrefixInfo {
        UInt8                   optionType(c_prefixInfo),
        UInt8                   optionLength(4),
        UInt8                   prefixLength,
        UInt1                   linkFlag,
        UInt1                   autoConfigFlag,
        UInt1                   rtAddrFlag,
        UInt5                   reserved1,
        UInt32                  validLifetime,
        UInt32                  preferredLifetime,
        UInt32                  reserved2,
        Ipv6Address             prefix
    } with {
        variant(linkFlag) FlagType(OCTET)
        variant(autoConfigFlag) FlagType(OCTET)
        variant(rtAddrFlag) FlagType(OCTET)
        variant(reserved1) FlagType(OCTET)
    }

    /*
     * @desc Derived from RFC 2461 clause 4.6.3
    */
    type record RedirectedHeader {
        UInt8       optionType(c_redirectOption),
        UInt8       optionLength,
        UInt48      reserved,
        octetstring data // no length limit?
    } with {
        variant LengthRef("+optionLength"); LengthMultiplier(64);
    }
    
    /*
     * @desc Derived from RFC2461 clause4.6.1 + MIPv6
     * @url http://www.ietf.org/rfc/rfc2461.txt
    */
    type record SrcLinkLayerAddress {
        UInt8               optionType(c_srcLinkLayerAddress),
        UInt8               optionLength,
        Oct6to15            linkLayerAddr
    } with {
        variant LengthRef("+optionLength"); LengthMultiplier(64);
        variant(linkLayerAddr) DefaultLength(6)
    }
    
    /*
     * @desc Derived from RFC 2461 clause 4.6.1 + MIPv6
     * @url http://www.ietf.org/rfc/rfc2461.txt
    */
    type record TgtLinkLayerAddress {
        UInt8               optionType(c_tgtLinkLayerAddress),
        UInt8               optionLength,
        Oct6to15            linkLayerAddr
    } with {
        variant LengthRef("+optionLength"); LengthMultiplier(64);
        variant(linkLayerAddr) DefaultLength(6)
    }
    
    /*
     * @desc Derived from RFC 2461 clause 4.6.4 + MIPv6
     * @url http://www.ietf.org/rfc/rfc2461.txt
    */
    type record MtuOption {
        UInt8   optionType(c_mtuOption),
        UInt8   optionLength(1),
        UInt16  reserved,
        UInt32  mtu
    }
    
    /*******************************************************
     * RFC3775 Options
     *******************************************************/
    /*
     * @desc  Extra ICMP option introduced by RFC3775, clause 7.3
    */
    type record AdvertisementInterval { //ND + MIPv6
        UInt8       optionType (c_advertisementInterval),
        UInt8       optionLength(1),
        UInt16      reserved,
        UInt32      advInterval
    }
    
    /*
     * @desc Extra ICMP option introduced by RFC3775, clause 7.4
    */
    type record HomeAgentInfo { //ND + MIPv6
        UInt8       optionType (c_homeAgentInfo),
        UInt8       optionLength (1),
        UInt16      reserved,
        UInt16      homeAgentPreference,
        UInt16      homeAgentLifetime
    }
    
    enumset integer Icmpv6MessageTypes {
        (1)     "Destination Unreachable",
        (2)     "Packet Too Big",
        (3)     "Time Exceeded",
        (4)     "Parameter Problem",
        (128)     "Echo Request",
        (129)     "Echo Reply",
        (130)     "Multicast Listener Query",
        (131)     "Multicast Listener Report Version 1",
        (132)     "Multicast Listener Done",
        (133)     "Router Solicitation",
        (134)     "Router Advertisement",
        (135)     "Neighbor Solicitation",
        (136)     "Neighbor Advertisement",
        (137)     "Redirect Message",
        (138)     "Router Renumbering",
        (141)     "Inverse Neighbor Discovery Solicitation",
        (142)     "Inverse Neighbor Discovery Advertisement",
        (143)     "Multicast Listener Report Version 2"
    }
} with {
    encode "FPB"
    variant ByteOrder(BIG_ENDIAN)
    runtime TypeEvFactoryJavaClass="com.fineqt.fpb.protocol.Icmpv6TypeEVExtFactory"
}